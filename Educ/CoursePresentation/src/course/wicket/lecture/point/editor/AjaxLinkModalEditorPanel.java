package course.wicket.lecture.point.editor;

import org.apache.wicket.ajax.AjaxRequestTarget;
import org.apache.wicket.ajax.markup.html.form.AjaxButton;
import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;
import org.apache.wicket.markup.html.form.Form;
import org.apache.wicket.markup.html.panel.FeedbackPanel;
import org.apache.wicket.model.CompoundPropertyModel;
import org.modelibra.wicket.container.DmPanel;
import org.modelibra.wicket.view.View;
import org.modelibra.wicket.view.ViewModel;
import org.modelibra.wicket.widget.TextFieldPanel;

import course.lecture.point.Point;
import course.lecture.point.Points;

/**
 * AjaxLinkModalEditorPanel used as context for modal window in
 * AjaxLinkEditorPanel. Contains form for updating point text and url
 * properties.
 * 
 * @author Vedad Kirlic
 * @version 2007-12-29
 */
public class AjaxLinkModalEditorPanel extends DmPanel {

	private static final long serialVersionUID = 1L;

	public AjaxLinkModalEditorPanel(final String id, final ViewModel viewModel,
			final ModalWindow modalWindow) {
		super(id);

		final Points points = (Points) viewModel.getEntities();
		final Point point = (Point) viewModel.getEntity();
		final Point pointCopy = point.copy();

		// set point copy as CompoundPropertyModel to be edited by the form so
		// we can use it in onSubmit to update original entity
		setModel(new CompoundPropertyModel(pointCopy));

		// feedback
		final FeedbackPanel feedback = new FeedbackPanel("feedback");
		feedback.setOutputMarkupId(true);
		add(feedback);

		// link form
		Form linkForm = new Form("linkForm");

		// we need ajax button for submit so we could close modal window - needs
		// AjaxRequestTarget
		linkForm.add(new AjaxButton("submit") {
			private static final long serialVersionUID = 1L;

			@Override
			protected void onSubmit(AjaxRequestTarget target, Form form) {
				points.getErrors().empty();
				if (points.update(point, pointCopy)) {
					modalWindow.close(target);
				} else {
					addErrorsByKeys(points);
					// update feedback component to display errors
					target.addComponent(feedback);
				}
			}

			@Override
			protected void onError(AjaxRequestTarget target, Form form) {
				// if error is generated by wicket
				target.addComponent(feedback);
			}
		});

		add(linkForm);

		// url property field
		View urlView = new View();
		urlView.setWicketId("url");

		ViewModel urlViewModel = new ViewModel();
		urlViewModel.setEntity(pointCopy);
		urlViewModel.setPropertyCode("url");

		TextFieldPanel urlField = new TextFieldPanel(urlViewModel, urlView);
		// we want url field to be required in this case
		urlField.getTextField().setRequired(true);
		linkForm.add(urlField);

		// text property field
		View textView = new View();
		textView.setWicketId("text");

		ViewModel textViewModel = new ViewModel();
		textViewModel.setEntity(pointCopy);
		textViewModel.setPropertyCode("text");
		TextFieldPanel text = new TextFieldPanel(textViewModel, textView);
		// set size to 64 to be reasonable for modal window
		text.setAttribute("size", "64");

		linkForm.add(text);
	}

}
